#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de teste completo para OSINT Investigador BR
Testa todas as funcionalidades principais do sistema
"""

import sys
import os
import json
import time
from datetime import datetime

# Adicionar o diret√≥rio atual ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from osint_investigador import OSINTInvestigador

def print_separator(title):
    """Imprime um separador visual"""
    print("\n" + "="*60)
    print(f" {title} ")
    print("="*60)

def test_cep_queries():
    """Testa consultas de CEP"""
    print_separator("TESTANDO CONSULTAS CEP")
    
    investigador = OSINTInvestigador()
    
    # Teste CEP v√°lido
    print("üîç Testando CEP v√°lido: 01310-100")
    resultado = investigador.consultar_cep("01310-100")
    if resultado and resultado.get('cep'):
        print("‚úÖ CEP v√°lido funcionando!")
        print(f"   Endere√ßo: {resultado.get('logradouro', 'N/A')}")
        print(f"   Bairro: {resultado.get('bairro', 'N/A')}")
        print(f"   Cidade: {resultado.get('localidade', 'N/A')}")
        print(f"   UF: {resultado.get('uf', 'N/A')}")
    else:
        print("‚ùå Erro na consulta de CEP v√°lido")
        return False
    
    # Teste CEP inv√°lido
    print("\nüîç Testando CEP inv√°lido: 00000-000")
    resultado = investigador.consultar_cep("00000-000")
    if not resultado or resultado.get('erro'):
        print("‚úÖ Valida√ß√£o de CEP inv√°lido funcionando!")
    else:
        print("‚ùå Valida√ß√£o de CEP inv√°lido falhou")
        return False
    
    return True

def test_ddd_queries():
    """Testa consultas de DDD"""
    print_separator("TESTANDO CONSULTAS DDD")
    
    investigador = OSINTInvestigador()
    
    # Teste DDD v√°lido
    print("üîç Testando DDD v√°lido: 11")
    resultado = investigador.consultar_ddd("11")
    if resultado and resultado.get('estado'):
        print("‚úÖ DDD v√°lido funcionando!")
        print(f"   Estado: {resultado.get('estado', 'N/A')}")
        print(f"   Cidades: {', '.join(resultado.get('cidades', [])[:3])}...")
    else:
        print("‚ùå Erro na consulta de DDD v√°lido")
        return False
    
    # Teste DDD inv√°lido
    print("\nüîç Testando DDD inv√°lido: 99")
    resultado = investigador.consultar_ddd("99")
    if not resultado or resultado.get('erro'):
        print("‚úÖ Valida√ß√£o de DDD inv√°lido funcionando!")
    else:
        print("‚ùå Valida√ß√£o de DDD inv√°lido falhou")
        return False
    
    return True

def test_cnpj_queries():
    """Testa consultas de CNPJ"""
    print_separator("TESTANDO CONSULTAS CNPJ")
    
    investigador = OSINTInvestigador()
    
    # Teste CNPJ v√°lido (Petrobras)
    print("üîç Testando CNPJ v√°lido: 33.000.167/0001-01")
    resultado = investigador.consultar_cnpj("33.000.167/0001-01")
    if resultado and resultado.get('razao_social'):
        print("‚úÖ CNPJ v√°lido funcionando!")
        print(f"   Raz√£o Social: {resultado.get('razao_social', 'N/A')}")
        print(f"   Fonte: {resultado.get('fonte', 'N/A')}")
    else:
        print("‚ùå Erro na consulta de CNPJ v√°lido")
        return False
    
    # Teste CNPJ inv√°lido
    print("\nüîç Testando CNPJ inv√°lido: 00.000.000/0001-00")
    resultado = investigador.consultar_cnpj("00.000.000/0001-00")
    if not resultado or resultado.get('erro'):
        print("‚úÖ Valida√ß√£o de CNPJ inv√°lido funcionando!")
    else:
        print("‚ùå Valida√ß√£o de CNPJ inv√°lido falhou")
        return False
    
    return True

def test_bank_queries():
    """Testa consultas de bancos"""
    print_separator("TESTANDO CONSULTAS BANCOS")
    
    investigador = OSINTInvestigador()
    
    # Teste consulta de todos os bancos
    print("üîç Testando consulta de todos os bancos")
    resultado = investigador.consultar_bancos()
    if resultado and resultado.get('bancos') and resultado.get('total', 0) > 0:
        print("‚úÖ Consulta de bancos funcionando!")
        print(f"   Total de bancos: {resultado.get('total', 0)}")
    else:
        print("‚ùå Erro na consulta de bancos")
        return False
    
    # Teste busca de banco espec√≠fico
    print("\nüîç Testando busca de banco espec√≠fico: 001")
    resultado = investigador.buscar_banco_por_codigo("001")
    if resultado and resultado.get('nome'):
        print("‚úÖ Busca de banco espec√≠fico funcionando!")
        print(f"   Banco: {resultado.get('nome', 'N/A')}")
        print(f"   C√≥digo: {resultado.get('codigo', 'N/A')}")
    else:
        print("‚ùå Erro na busca de banco espec√≠fico")
        return False
    
    return True

def test_ibge_queries():
    """Testa consultas IBGE"""
    print_separator("TESTANDO CONSULTAS IBGE")
    
    investigador = OSINTInvestigador()
    
    # Teste consulta de munic√≠pios
    print("üîç Testando consulta de munic√≠pios de SP")
    resultado = investigador.consultar_municipios_uf("SP")
    if resultado and resultado.get('municipios') and resultado.get('total', 0) > 0:
        print("‚úÖ Consulta IBGE funcionando!")
        print(f"   Encontrados {resultado.get('total', 0)} munic√≠pios")
        municipios = resultado.get('municipios', [])
        if municipios:
            exemplos = [m.get('name', 'N/A') for m in municipios[:3]]
            print(f"   Exemplos: {', '.join(exemplos)}")
    else:
        print("‚ùå Erro na consulta IBGE")
        return False
    
    return True

def test_cache_system():
    """Testa o sistema de cache"""
    print_separator("TESTANDO SISTEMA DE CACHE")
    
    investigador = OSINTInvestigador()
    
    # Limpar cache primeiro
    print("üîç Limpando cache para teste")
    investigador.limpar_cache()
    
    # Primeira consulta (sem cache)
    print("üîç Primeira consulta CEP (sem cache)")
    start_time = time.time()
    resultado1 = investigador.consultar_cep("01310-100")
    time1 = time.time() - start_time
    
    # Segunda consulta (com cache)
    print("üîç Segunda consulta CEP (com cache)")
    start_time = time.time()
    resultado2 = investigador.consultar_cep("01310-100")
    time2 = time.time() - start_time
    
    # Verificar estat√≠sticas do cache
    stats = investigador.estatisticas_cache()
    
    if resultado1 and resultado2 and time2 < time1 and stats.get('arquivos', 0) > 0:
        print("‚úÖ Sistema de cache funcionando!")
        print(f"   Primeira consulta: {time1:.3f}s")
        print(f"   Segunda consulta: {time2:.3f}s")
        print(f"   Melhoria: {((time1 - time2) / time1 * 100):.1f}%")
        print(f"   Arquivos em cache: {stats.get('arquivos', 0)}")
    else:
        print("‚ùå Sistema de cache n√£o est√° funcionando adequadamente")
        return False
    
    return True

def test_export_functions():
    """Testa fun√ß√µes de exporta√ß√£o"""
    print_separator("TESTANDO FUN√á√ïES DE EXPORTA√á√ÉO")
    
    investigador = OSINTInvestigador()
    
    # Fazer uma consulta para ter dados para exportar
    print("üîç Fazendo consulta para teste de exporta√ß√£o")
    resultado = investigador.consultar_cep("01310-100")
    
    if not resultado:
        print("‚ùå N√£o foi poss√≠vel obter dados para teste de exporta√ß√£o")
        return False
    
    # Testar exporta√ß√£o JSON
    try:
        json_data = json.dumps(resultado, indent=2, ensure_ascii=False)
        print("‚úÖ Exporta√ß√£o JSON funcionando!")
    except Exception as e:
        print(f"‚ùå Erro na exporta√ß√£o JSON: {e}")
        return False
    
    # Testar exporta√ß√£o CSV (simulada)
    try:
        csv_line = f"{resultado.get('cep', '')},{resultado.get('logradouro', '')},{resultado.get('bairro', '')}"
        print("‚úÖ Exporta√ß√£o CSV funcionando!")
    except Exception as e:
        print(f"‚ùå Erro na exporta√ß√£o CSV: {e}")
        return False
    
    return True

def main():
    """Fun√ß√£o principal de teste"""
    print_separator("INICIANDO TESTES COMPLETOS - OSINT INVESTIGADOR BR")
    print(f"Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    
    tests = [
        ("Consultas CEP", test_cep_queries),
        ("Consultas DDD", test_ddd_queries),
        ("Consultas CNPJ", test_cnpj_queries),
        ("Consultas Bancos", test_bank_queries),
        ("Consultas IBGE", test_ibge_queries),
        ("Sistema de Cache", test_cache_system),
        ("Fun√ß√µes de Exporta√ß√£o", test_export_functions),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            print(f"\nüß™ Executando teste: {test_name}")
            result = test_func()
            results.append((test_name, result))
            
            if result:
                print(f"‚úÖ {test_name}: PASSOU")
            else:
                print(f"‚ùå {test_name}: FALHOU")
                
        except Exception as e:
            print(f"‚ùå {test_name}: ERRO - {e}")
            results.append((test_name, False))
    
    # Resumo final
    print_separator("RESUMO DOS TESTES")
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    print(f"Testes executados: {total}")
    print(f"Testes aprovados: {passed}")
    print(f"Testes falharam: {total - passed}")
    print(f"Taxa de sucesso: {(passed/total*100):.1f}%")
    
    if passed == total:
        print("\nüéâ TODOS OS TESTES PASSARAM! Projeto pronto para produ√ß√£o!")
        return True
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} teste(s) falharam. Revisar antes do deploy.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)