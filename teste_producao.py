#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste de Produ√ß√£o - OSINT Investigador BR
Verifica funcionalidades essenciais para produ√ß√£o
"""

import sys
import os
import json
import time
from datetime import datetime

# Adicionar o diret√≥rio atual ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from osint_investigador import OSINTInvestigador

def print_header(title):
    """Imprime cabe√ßalho"""
    print("\n" + "="*50)
    print(f" {title} ")
    print("="*50)

def test_core_functionality():
    """Testa funcionalidades essenciais"""
    print_header("TESTE DE PRODU√á√ÉO - FUNCIONALIDADES ESSENCIAIS")
    
    investigador = OSINTInvestigador()
    tests_passed = 0
    total_tests = 0
    
    # Teste 1: CEP v√°lido
    total_tests += 1
    print("\nüîç Teste 1: Consulta CEP v√°lido (01310-100)")
    try:
        resultado = investigador.consultar_cep("01310-100")
        if resultado and resultado.get('cep') and not resultado.get('erro'):
            print(f"‚úÖ PASSOU - Endere√ßo: {resultado.get('logradouro', 'N/A')}, {resultado.get('localidade', 'N/A')}")
            tests_passed += 1
        else:
            print("‚ùå FALHOU - CEP v√°lido n√£o retornou dados corretos")
    except Exception as e:
        print(f"‚ùå ERRO - {e}")
    
    # Teste 2: CEP inv√°lido
    total_tests += 1
    print("\nüîç Teste 2: Valida√ß√£o CEP inv√°lido (00000-000)")
    try:
        resultado = investigador.consultar_cep("00000-000")
        if resultado and resultado.get('erro'):
            print("‚úÖ PASSOU - Valida√ß√£o funcionando corretamente")
            tests_passed += 1
        else:
            print("‚ùå FALHOU - Valida√ß√£o de CEP inv√°lido n√£o funcionou")
    except Exception as e:
        print(f"‚ùå ERRO - {e}")
    
    # Teste 3: DDD v√°lido
    total_tests += 1
    print("\nüîç Teste 3: Consulta DDD v√°lido (11)")
    try:
        resultado = investigador.consultar_ddd("11")
        if resultado and resultado.get('estado') and not resultado.get('erro'):
            print(f"‚úÖ PASSOU - Estado: {resultado.get('estado', 'N/A')}, Cidades: {len(resultado.get('cidades', []))}")
            tests_passed += 1
        else:
            print("‚ùå FALHOU - DDD v√°lido n√£o retornou dados corretos")
    except Exception as e:
        print(f"‚ùå ERRO - {e}")
    
    # Teste 4: Cache funcionando
    total_tests += 1
    print("\nüîç Teste 4: Sistema de Cache")
    try:
        # Limpar cache
        investigador.limpar_cache()
        
        # Primeira consulta
        start = time.time()
        resultado1 = investigador.consultar_cep("20040-020")  # Copacabana
        time1 = time.time() - start
        
        # Segunda consulta (cache)
        start = time.time()
        resultado2 = investigador.consultar_cep("20040-020")
        time2 = time.time() - start
        
        if resultado1 and resultado2 and time2 < time1:
            print(f"‚úÖ PASSOU - Cache funcionando (1¬™: {time1:.3f}s, 2¬™: {time2:.3f}s)")
            tests_passed += 1
        else:
            print("‚ùå FALHOU - Cache n√£o est√° funcionando")
    except Exception as e:
        print(f"‚ùå ERRO - {e}")
    
    # Teste 5: Exporta√ß√£o JSON
    total_tests += 1
    print("\nüîç Teste 5: Exporta√ß√£o de dados")
    try:
        resultado = investigador.consultar_cep("01310-100")
        if resultado:
            json_data = json.dumps(resultado, indent=2, ensure_ascii=False)
            if len(json_data) > 50:  # JSON v√°lido e com conte√∫do
                print("‚úÖ PASSOU - Exporta√ß√£o JSON funcionando")
                tests_passed += 1
            else:
                print("‚ùå FALHOU - JSON muito pequeno ou inv√°lido")
        else:
            print("‚ùå FALHOU - N√£o h√° dados para exportar")
    except Exception as e:
        print(f"‚ùå ERRO - {e}")
    
    # Teste 6: Logs funcionando
    total_tests += 1
    print("\nüîç Teste 6: Sistema de Logs")
    try:
        # Fazer uma consulta para gerar logs
        investigador.consultar_cep("01310-100")
        
        # Verificar se arquivo de log existe
        log_files = []
        for file in os.listdir('.'):
            if file.startswith('osint_') and file.endswith('.log'):
                log_files.append(file)
        
        if log_files:
            print(f"‚úÖ PASSOU - Sistema de logs funcionando ({len(log_files)} arquivo(s))")
            tests_passed += 1
        else:
            print("‚ùå FALHOU - Arquivos de log n√£o encontrados")
    except Exception as e:
        print(f"‚ùå ERRO - {e}")
    
    # Resumo
    print_header("RESUMO DO TESTE DE PRODU√á√ÉO")
    print(f"Testes executados: {total_tests}")
    print(f"Testes aprovados: {tests_passed}")
    print(f"Taxa de sucesso: {(tests_passed/total_tests*100):.1f}%")
    
    if tests_passed >= 5:  # Pelo menos 5 dos 6 testes essenciais
        print("\nüéâ PROJETO APROVADO PARA PRODU√á√ÉO!")
        print("‚úÖ Funcionalidades essenciais est√£o funcionando")
        print("‚úÖ Sistema est√° est√°vel e pronto para deploy")
        return True
    else:
        print(f"\n‚ö†Ô∏è PROJETO PRECISA DE AJUSTES")
        print(f"‚ùå Apenas {tests_passed}/{total_tests} testes passaram")
        print("‚ùå Revisar funcionalidades antes do deploy")
        return False

def test_web_interface():
    """Testa se a interface web pode ser iniciada"""
    print_header("TESTE DA INTERFACE WEB")
    
    try:
        # Importar m√≥dulos da web app
        from web_app import app
        
        # Verificar se a app foi criada
        if app:
            print("‚úÖ Interface web configurada corretamente")
            print("‚úÖ Flask app criada com sucesso")
            print("‚úÖ Rotas configuradas")
            return True
        else:
            print("‚ùå Erro na configura√ß√£o da interface web")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao importar interface web: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print_header("OSINT INVESTIGADOR BR - TESTE DE PRODU√á√ÉO")
    print(f"Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    
    # Teste das funcionalidades principais
    core_ok = test_core_functionality()
    
    # Teste da interface web
    web_ok = test_web_interface()
    
    # Resultado final
    print_header("RESULTADO FINAL")
    
    if core_ok and web_ok:
        print("üéâ PROJETO 100% PRONTO PARA PRODU√á√ÉO!")
        print("‚úÖ Todas as funcionalidades essenciais funcionando")
        print("‚úÖ Interface web configurada corretamente")
        print("‚úÖ Sistema est√°vel e confi√°vel")
        print("\nüöÄ PODE FAZER O DEPLOY NO GITHUB!")
        return True
    elif core_ok:
        print("‚úÖ FUNCIONALIDADES PRINCIPAIS OK")
        print("‚ö†Ô∏è Interface web com problemas menores")
        print("‚úÖ PODE FAZER O DEPLOY (funcionalidades essenciais OK)")
        return True
    else:
        print("‚ùå PROJETO N√ÉO EST√Å PRONTO")
        print("‚ùå Funcionalidades essenciais com problemas")
        print("‚ùå N√ÉO FAZER DEPLOY AINDA")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)